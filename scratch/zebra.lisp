(ql:quickload :huginn)
(cl:in-package #:huginn-user)


(defmacro time-median ((times) &body body)
  (alexandria:with-gensyms (!data !i !start !end)
    `(let ((,!data (serapeum:vect)))
       (dotimes (,!i ,times)
         (let ((,!start 0)
               (,!end 0))
           (setf ,!start (get-internal-run-time))
           (progn ,@body)
           (setf ,!end (get-internal-run-time))
           (vector-push-extend (- ,!end ,!start) ,!data)))
       (let ((median (alexandria:median ,!data)))
         (print (coerce (/ median internal-time-units-per-second)
                        'single-float))))))


(with-options (:database (make-database 'huginn.m.d:database))
  (with-options (:compile t)
    (clear)

    (<- `(house ? ? ? ? ?))
    (<- `(= ?item ?item))
    (<- `(member ?item ,(li '(?item . ?rest))))
    (<- `(member ?item ,(li '(? . ?rest)))
        '(member ?item ?rest))
    (<- `(iright ?left ?right ,(li `(?left ?right . ?))))
    (<- `(iright ?left ?right ,(li `(? . ?rest)))
        `(iright ?left ?right ?rest))
    (<- `(nextto ?x ?y ?list)
        `(iright ?x ?y ?list))
    (<- `(nextto ?x ?y ?list)
        `(iright ?y ?x ?list))

    (<- `(zebra ?houses ?water-drinker ?zebra-owner)
        `(= ?houses ,(li '((house norwegian ? ? ? ?)
                           ?
                           (house ? ? ? milk ?)
                           ?
                           ?)))
        `(member (house englishman ? ? ? red) ?houses)
        `(member (house spaniard dog ? ? ?) ?houses)
        `(member (house ? ? ? coffe green) ?houses)
        `(member (house ukrainian ? ? tea ?) ?houses)
        `(iright (house ? ? ? ? ivory)
                 (house ? ? ? ? green)
                 ?houses)
        `(member (house ? snails old-gold ? ?) ?houses)
        `(member (house ? ? kools ? yellow) ?houses)
        `(nextto (house ? ? chesterfield ? ?)
                 (house ? fox ? ? ?)
                 ?houses)
        `(nextto (house ? ? kools ? ?)
                 (house ? horse ? ? ?)
                 ?houses)
        `(member (house ? ? luckystrike orange-juice ?)
                 ?houses)
        `(member (house japanese ? parliments ? ?)
                 ?houses)
        `(nextto (house norwegian ? ? ? ?)
                 (house ? ? ? ? blue)
                 ?houses)
        `(member (house ?water-drinker ? ? water ?) ?houses)
        `(member (house ?zebra-owner zebra ? ? ?) ?houses))

    (defparameter *answer* (?- '(zebra ?houses ?water-drinker ?zebra-owner)))
    (print (cl-ds:consume-front *answer*))
    )

  (setf *shared-resources* (make-shared-resources))

  (time-median (50)
               (next-answer (?- '(zebra ?houses ?water-drinker ?zebra-owner))))

  )
