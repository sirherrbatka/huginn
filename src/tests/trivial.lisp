(cl:in-package #:huginn-tests)


(defmacro with/without-compilation (&body body)
  `(flet ((impl ()
           ,@body))
    (with-options (:compile nil)
      (impl))
    (with-options (:compile t)
      (impl))))

(prove:plan 26)

(with/without-compilation
  (with-options (:database (make-database 'huginn.m.d:database))
    (<- '(lubi zuzia ?cos) '(jest ?cos kot))
    (<- '(jest sansa kot))

    (let ((answer (?- '(lubi zuzia ?cos))))
      (prove:is (cl-ds:consume-front answer) '((?cos . sansa)))
      (prove:is (cl-ds:consume-front answer) nil)))

  (with-options (:database (make-database 'huginn.m.d:database))
    (<- `(member ?item ,(li '(?item . ?rest))))
    (<- `(member ?item ,(li '(? . ?rest)))
        '(member ?item ?rest))
    (<- '(= ?item ?item))

    (let ((answer (?- `(member ?zuzia ,(li `(nie-zuzia zuzia)))
                      '(= ?zuzia zuzia))))
      (prove:is (cl-ds:consume-front answer) '((?zuzia . zuzia)))
      (prove:is (cl-ds:consume-front answer) nil)))

  (with-options (:database (make-database 'huginn.m.d:database))
    (<- `(rest ?rest ,(li '(? . ?rest))))
    (let ((answer (?- `(rest ?rest ,(li `(nie-zuzia zuzia))))))
      (prove:is (cl-ds:consume-front answer) '((?rest . (zuzia))))
      (prove:is (cl-ds:consume-front answer) nil)))

  (with-options (:database (make-database 'huginn.m.d:database))
    (<- `(= ?item ?item))
    (<- `(member ?item ,(li '(?item . ?rest))))
    (<- `(member ?item ,(li '(? . ?rest)))
        '(member ?item ?rest))
    (<- `(s ?item))

    (prove:is (cl-ds.alg:to-list (?- `(= ?list ,(li `(? ? ?)))
                                     `(member (s a) ?list)
                                     `(member (s b) ?list)))
              '(((?LIST (S A) (S B) :?))
                ((?LIST (S A) :? (S B)))
                ((?LIST :? (S A) (S B)))
                ((?LIST (S B) (S A) :?))
                ((?LIST :? (S B) (S A)))
                ((?LIST (S B) :? (S A))))))

  (with-options (:database (make-database 'huginn.m.d:database))
    (<- `(iright ?left ?right ,(li `(?left ?right . ?))))
    (<- `(iright ?left ?right ,(li `(? . ?rest)))
        `(iright ?left ?right ?rest))
    (<- `(nextto ?x ?y ?list)
        `(iright ?x ?y ?list))
    (<- `(nextto ?x ?y ?list)
        `(iright ?y ?x ?list))

    (prove:is (cl-ds.alg:to-list
               (?- `(iright ?left ?right ,(li '(a b c d e f g)))))
              '(((?LEFT . A) (?RIGHT . B)) ((?LEFT . B) (?RIGHT . C))
                ((?LEFT . C) (?RIGHT . D)) ((?LEFT . D) (?RIGHT . E))
                ((?LEFT . E) (?RIGHT . F)) ((?LEFT . F) (?RIGHT . G))))
    (prove:is (cl-ds.alg:to-list
               (?- `(nextto ?x ?y
                            ,(li '(a b c d e f g)))))
              '(((?X . A) (?Y . B)) ((?X . B) (?Y . C)) ((?X . C) (?Y . D))
                ((?X . D) (?Y . E)) ((?X . E) (?Y . F)) ((?X . F) (?Y . G))
                ((?X . B) (?Y . A)) ((?X . C) (?Y . B)) ((?X . D) (?Y . C))
                ((?X . E) (?Y . D)) ((?X . F) (?Y . E)) ((?X . G) (?Y . F)))))

  (with-options (:database (make-database 'huginn.m.d:database))
    (<- `(= ?item ?item))
    (<- `(member ?item ,(li '(?item . ?rest))))
    (<- `(member ?item ,(li '(? . ?rest)))
        '(member ?item ?rest))
    (<- `(h ? ? ?))

    (let ((answer (?- `(= ?list ,(li `(? ? ?)))
                      `(member (h a ? ?) ?list)
                      `(member (h ? b ?) ?list)
                      `(member (h ? ? c) ?list))))
      (prove:is (cl-ds.alg:to-list answer)
                '(((?LIST (H A :? :?) (H :? B C) :?))
                  ((?LIST (H A :? :?) (H :? B :?) (H :? :? C)))
                  ((?LIST (H A :? C) (H :? B :?) :?))
                  ((?LIST (H A :? :?) (H :? :? C) (H :? B :?)))
                  ((?LIST (H A :? :?) :? (H :? B C)))
                  ((?LIST (H A :? C) :? (H :? B :?)))
                  ((?LIST (H A B :?) (H :? :? C) :?))
                  ((?LIST (H A B :?) :? (H :? :? C)))
                  ((?LIST (H A B C) :? :?))
                  ((?LIST :? (H A B C) :?))
                  ((?LIST :? (H A B :?) (H :? :? C)))
                  ((?LIST (H :? :? C) (H A B :?) :?))
                  ((?LIST :? (H A :? C) (H :? B :?)))
                  ((?LIST :? (H A :? :?) (H :? B C)))
                  ((?LIST (H :? :? C) (H A :? :?) (H :? B :?)))
                  ((?LIST (H :? B :?) (H A :? C) :?))
                  ((?LIST (H :? B :?) (H A :? :?) (H :? :? C)))
                  ((?LIST (H :? B C) (H A :? :?) :?))
                  ((?LIST :? (H :? B C) (H A :? :?)))
                  ((?LIST :? (H :? B :?) (H A :? C)))
                  ((?LIST (H :? :? C) (H :? B :?) (H A :? :?)))
                  ((?LIST :? (H :? :? C) (H A B :?)))
                  ((?LIST :? :? (H A B C)))
                  ((?LIST (H :? :? C) :? (H A B :?)))
                  ((?LIST (H :? B :?) (H :? :? C) (H A :? :?)))
                  ((?LIST (H :? B :?) :? (H A :? C)))
                  ((?LIST (H :? B C) :? (H A :? :?)))))))

  (with-options (:database (make-database 'huginn.m.d:database))
    (<- `(= ?item ?item))
    (<- `(member ?item ,(li '(?item . ?rest))))
    (<- `(member ?item ,(li '(? . ?rest)))
        '(member ?item ?rest))
    (<- `(h ? ?))

    (let ((answer (?- `(= ?list ,(li `(?a ? ?)))
                      `(member (h a ?) ?list)
                      `(member (h ? b) ?list)
                      `(member (h ? c) ?list))))
      (prove:is (cl-ds.alg:to-list answer)
                '(((?LIST (H A :?) (H :? B) (H :? C)) (?A H A :?))
                  ((?LIST (H A C) (H :? B) :?) (?A H A C))
                  ((?LIST (H A :?) (H :? C) (H :? B)) (?A H A :?))
                  ((?LIST (H A C) :? (H :? B)) (?A H A C))
                  ((?LIST (H A B) (H :? C) :?) (?A H A B))
                  ((?LIST (H A B) :? (H :? C)) (?A H A B))
                  ((?LIST :? (H A B) (H :? C)) (?A . :?))
                  ((?LIST (H :? C) (H A B) :?) (?A H :? C))
                  ((?LIST :? (H A C) (H :? B)) (?A . :?))
                  ((?LIST (H :? C) (H A :?) (H :? B)) (?A H :? C))
                  ((?LIST (H :? B) (H A C) :?) (?A H :? B))
                  ((?LIST (H :? B) (H A :?) (H :? C)) (?A H :? B))
                  ((?LIST :? (H :? B) (H A C)) (?A . :?))
                  ((?LIST (H :? C) (H :? B) (H A :?)) (?A H :? C))
                  ((?LIST :? (H :? C) (H A B)) (?A . :?))
                  ((?LIST (H :? C) :? (H A B)) (?A H :? C))
                  ((?LIST (H :? B) (H :? C) (H A :?)) (?A H :? B))
                  ((?LIST (H :? B) :? (H A C)) (?A H :? B))))))

  (with-options (:database (make-database 'huginn.m.d:database))
    (<- `(iright ?left ?right ,(li `(?left ?right . ?))))
    (<- `(iright ?left ?right ,(li `(? . ?rest)))
        `(iright ?left ?right ?rest))
    (<- `(nextto ?x ?y ?list)
        `(iright ?x ?y ?list))
    (<- `(nextto ?x ?y ?list)
        `(iright ?y ?x ?list))

    (prove:is (cl-ds.alg:to-list (?- `(iright ?left ?right
                                              ,(li '(a b c d e f g)))))
              '(((?LEFT . A) (?RIGHT . B)) ((?LEFT . B) (?RIGHT . C))
                ((?LEFT . C) (?RIGHT . D)) ((?LEFT . D) (?RIGHT . E))
                ((?LEFT . E) (?RIGHT . F)) ((?LEFT . F) (?RIGHT . G))))

    (prove:is (cl-ds.alg:to-list (?- `(nextto ?x ?y ,(li '(a b c d e f g)))))
              '(((?X . A) (?Y . B)) ((?X . B) (?Y . C)) ((?X . C) (?Y . D))
                ((?X . D) (?Y . E)) ((?X . E) (?Y . F)) ((?X . F) (?Y . G))
                ((?X . B) (?Y . A)) ((?X . C) (?Y . B)) ((?X . D) (?Y . C))
                ((?X . E) (?Y . D)) ((?X . F) (?Y . E)) ((?X . G) (?Y . F))))))

(prove:finalize)
